name: Build Packages
on:
  push:
    paths-ignore:
      - '**/*.md'
      - 'mkdocs.yml'
      - 'docs/**/*'
    branches: 
      - main
      - release-*
    tags:
      - 'v*'
  pull_request:
    branches: 
      - master
      - release-*
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and Test
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Initialize .NET
      uses: Hexalith/Hexalith.Builds/Github/initialize-dotnet@main
    - name: Initialize Build
      uses: Hexalith/Hexalith.Builds/Github/initialize-build@main
    - name: Get Version
      id: version
      uses: Hexalith/Hexalith.Builds/Github/version@main
      with:
        ref: ${{ github.ref}}
        buildId: ${{ github.run_number }}
        buildAttempt: ${{ github.run_attempt }}
        
    - name: Run Unit Tests of version (${{ steps.version.outputs.version }})
      uses: Hexalith/Hexalith.Builds/Github/unit-tests@main
      with:
        project-name: ${{ github.event.repository.name }}
    - name: Build Packages version (${{ steps.version.outputs.version }})
      uses: Hexalith/Hexalith.Builds/Github/build-packages@main
      with:
        version: ${{ steps.version.outputs.version }}
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: |
          **/*.nupkg
          **/*.snupkg

  publish:
    needs: build
    runs-on: ubuntu-latest
    environment: Staging
    name: Publish (${{ needs.build.outputs.version }}) Packages
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
    - name: Publish Packages
      uses: Hexalith/Hexalith.Builds/Github/publish-packages@main
      with:
        version: ${{ needs.build.outputs.version }}
        nuget-api-key: ${{ secrets.NUGET_API_KEY }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

    